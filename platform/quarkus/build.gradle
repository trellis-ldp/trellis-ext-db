plugins {
    id 'io.quarkus'
}

repositories {
    mavenLocal() {
        content {
            includeGroup "org.trellisldp.ext"
        }
    }
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

def installForQuarkus = [
    "trellis-aws",
    "trellis-cassandra",
    "trellis-db"
]

dependencies {
    implementation enforcedPlatform("io.quarkus:quarkus-bom:$quarkusVersion")
    implementation enforcedPlatform("org.trellisldp:trellis-bom:$trellisVersion")

    implementation 'io.quarkus:quarkus-jsonb'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-security'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-jwt'
    implementation 'io.quarkus:quarkus-smallrye-metrics'
    implementation 'io.quarkus:quarkus-smallrye-openapi'

    // Trellis Application
    implementation "org.trellisldp:trellis-app"
    implementation "org.trellisldp:trellis-cdi"

    // Trellis authN/authZ
    implementation "org.trellisldp:trellis-auth-jwt"
    implementation "org.trellisldp:trellis-webac"

    // Trellis components
    implementation "org.trellisldp:trellis-audit"
    implementation "org.trellisldp:trellis-cache"
    implementation "org.trellisldp:trellis-constraint-rules"
    implementation "org.trellisldp:trellis-event-jsonb"
    implementation "org.trellisldp:trellis-io-jena"
    implementation "org.trellisldp:trellis-namespaces"
    implementation "org.trellisldp:trellis-rdfa"
    implementation "org.trellisldp:trellis-vocabulary"

    // Persistence
    if (project.hasProperty("cassandra")) {
        // Cassandra dependencies
        implementation 'io.quarkus:quarkus-smallrye-reactive-messaging'
        implementation "org.trellisldp.ext:trellis-cassandra:${project.version}"
        implementation "org.trellisldp:trellis-reactive"
    } else {
        // Database dependencies
        implementation 'io.quarkus:quarkus-agroal'
        implementation 'io.quarkus:quarkus-flyway'
        implementation 'io.quarkus:quarkus-jdbc-h2'
        implementation 'io.quarkus:quarkus-jdbc-postgresql'
        implementation "org.trellisldp.ext:trellis-db:${project.version}"

        if (project.hasProperty("cloud")) {
            implementation "org.trellisldp.ext:trellis-aws:${project.version}"
        } else {
            implementation 'io.quarkus:quarkus-smallrye-reactive-messaging'
            implementation "org.trellisldp:trellis-file"
            implementation "org.trellisldp:trellis-reactive"
        }
    }

    // Other dependencies
    implementation "com.github.spullara.mustache.java:compiler:$mustacheVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.jena:jena-arq:$jenaVersion"
    implementation("org.apache.commons:commons-rdf-jena:$commonsRdfVersion") {
        exclude group: "org.apache.commons", module: "commons-rdf-simple"
        exclude group: 'org.apache.jena', module: 'jena-osgi'
        exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xerces'
    }
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    runtimeOnly "jakarta.activation:jakarta.activation-api:$activationApiVersion"
    runtimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"
    runtimeOnly "org.yaml:snakeyaml:$snakeyamlVersion"

    testImplementation "com.opentable.components:otj-pg-embedded:$otjPgVersion"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.apache.commons:commons-text:$commonsTextVersion"
    testImplementation "org.jboss.resteasy:resteasy-client"
    testImplementation "org.trellisldp:trellis-test"
}

test {
    systemProperty 'com.arjuna.ats.arjuna.objectstore.objectStoreDir', "$buildDir/data/ObjectStore"
    systemProperty 'quarkus.datasource.driver', 'org.postgresql.Driver'
    systemProperty 'quarkus.datasource.url', 'jdbc:postgresql://localhost/postgres'
    systemProperty 'quarkus.flyway.migrate-at-start', 'true'
    systemProperty 'trellis.file.memento-path', "$buildDir/data/mementos"
    systemProperty 'trellis.file.binary-path', "$buildDir/data/binaries"
    systemProperty 'trellis.http.weak-etag', 'true'
    systemProperty "trellis.aws.memento-bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.aws.binary-bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.aws.topic", System.getenv("AWS_TEST_TOPIC") ?: "test-topic"

    if (project.hasProperty("cassandra")) {
        systemProperty "trellis.test.cassandra", project.findProperty("trellis.test.cassandra") ?: System.getenv("TEST_CASSANDRA")
    } else {
        // enable the db tests
        if (System.getenv("QUARKUS_EXTERNAL_PGSQL")) {
            systemProperty 'trellis.test.quarkus.external-pgsql', 'true'
        } else {
            systemProperty 'trellis.test.quarkus.embedded-pgsql', 'true'
        }
    }
}

sonarqube {
    skipProject = true
}

/* Quarkus-related settings */
buildNative.enabled = false
rootProject.childProjects.each { n, p ->
    if (installForQuarkus.contains(p.name)) {
        tasks.compileJava.dependsOn p.tasks.install
    }
}

// This subproject is not part of the release and its dependencies should not
// be considered during the release process.
release {
    ignoredSnapshotDependencies = installForQuarkus.collect { "org.trellisldp.ext:" + it }
}


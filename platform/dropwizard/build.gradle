apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'com.palantir.docker'

description = 'Trellis Database Application'
mainClassName = 'org.trellisldp.ext.db.app.TrellisApplication'
applicationName = 'trellis-db'

ext {
    moduleName = 'org.trellisldp.ext.db.app'
}

dependencies {
    implementation enforcedPlatform("org.trellisldp:trellis-bom:$trellisVersion")

    implementation "io.dropwizard:dropwizard-auth:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-http2:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-jdbi3:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-metrics:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-migrations:$dropwizardVersion"
    implementation "jakarta.jms:jakarta.jms-api:$jmsApiVersion"
    implementation "io.smallrye:smallrye-config:$smallryeConfigVersion"
    implementation "org.apache.activemq:activemq-client:$activeMqVersion"
    implementation "org.apache.kafka:kafka-clients:$kafkaVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    implementation "org.trellisldp:trellis-api"
    implementation "org.trellisldp:trellis-app"
    implementation "org.trellisldp:trellis-audit"
    implementation "org.trellisldp:trellis-cache"
    implementation "org.trellisldp:trellis-constraint-rules"
    implementation "org.trellisldp:trellis-dropwizard"
    implementation "org.trellisldp:trellis-event-jackson"
    implementation "org.trellisldp:trellis-file"
    implementation "org.trellisldp:trellis-http"
    implementation "org.trellisldp:trellis-io-jena"
    implementation "org.trellisldp:trellis-jms"
    implementation "org.trellisldp:trellis-kafka"
    implementation "org.trellisldp:trellis-rdfa"
    implementation "org.trellisldp:trellis-vocabulary"
    implementation "org.trellisldp:trellis-webac"

    implementation project(':trellis-db')

    runtimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"
    runtimeOnly "jakarta.activation:jakarta.activation-api:$activationApiVersion"
    runtimeOnly "mysql:mysql-connector-java:$mysqlVersion"
    runtimeOnly "org.postgresql:postgresql:$postgresVersion"
    runtimeOnly "org.yaml:snakeyaml:$snakeyamlVersion"

    testImplementation "com.h2database:h2:$h2Version"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "com.google.guava:guava:$guavaVersion"
    testImplementation "com.opentable.components:otj-pg-embedded:$otjPgVersion"
    testImplementation "io.dropwizard:dropwizard-client:$dropwizardVersion"
    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "org.apache.activemq:activemq-broker:$activeMqVersion"
    testImplementation "org.apache.commons:commons-text:$commonsTextVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.trellisldp:trellis-test"
}

docker {
    name "trellisldp/trellis-ext-db:${project.version}"
    tags 'latest', 'develop'
    dockerfile file('src/docker/Dockerfile')
    files tasks.distTar.outputs, './src/dist/etc/config.yml','./src/docker/command.sh'
    buildArgs([BUILD_VERSION: project.version])
    def gitLabels = ['git.url':'https://github.com/trellis-ldp/trellis-extensions']
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        def hash = stdout.toString('UTF-8').trim()
        if (!hash.isEmpty()) {
            gitLabels.put('git.commit', hash)
        }
    } catch (all) { }
    labels(gitLabels)
    pull false
    noCache false
}

signing {
    sign distTar
    sign distZip
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist {
    dependsOn copyDistTask
}

test {
	maxParallelForks = Runtime.runtime.availableProcessors() > 2 ? Runtime.runtime.availableProcessors() / 2 : 1
}

jar {
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}


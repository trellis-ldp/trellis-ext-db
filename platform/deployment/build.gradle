apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'com.palantir.docker'

description = 'Trellis Database Application'
mainClassName = 'org.trellisldp.ext.db.app.TrellisApplication'
applicationName = 'trellis-db'

dependencies {
    implementation project(':trellis-db-app')

    runtimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"
    runtimeOnly "jakarta.activation:jakarta.activation-api:$activationApiVersion"

    runtimeOnly "mysql:mysql-connector-java:$mysqlVersion"
    runtimeOnly "org.postgresql:postgresql:$postgresVersion"
    runtimeOnly "org.yaml:snakeyaml:$snakeyamlVersion"
}

docker {
    name "trellisldp/trellis-ext-db:${project.version}"
    tags 'latest', 'develop'
    dockerfile file('src/docker/Dockerfile')
    files tasks.distTar.outputs, './src/dist/etc/config.yml','./src/docker/command.sh'
    buildArgs([BUILD_VERSION: project.version])
    def gitLabels = ['git.url':'https://github.com/trellis-ldp/trellis-extensions']
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        def hash = stdout.toString('UTF-8').trim()
        if (!hash.isEmpty()) {
            gitLabels.put('git.commit', hash)
        }
    } catch (all) { }
    labels(gitLabels)
    pull false
    noCache false
}

signing {
    sign distTar
    sign distZip
}

test {
    jacoco {
        enabled = false;
    }
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist {
    dependsOn copyDistTask
}

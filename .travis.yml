language: java
sudo: false
dist: xenial
group: edge

addons:
  sonarcloud:
    organization: trellis-ldp
  postgresql: "9.6"

stages:
  - test
  - deploy

services:
  - postgresql
  - mysql

branches:
  only:
    - master
    # release tags
    - /^trellis-extensions-\d+\.\d+\.\d+$/
    # maintenance branches
    - /^trellis-extensions-\d+\.\d+\.x$/
    # long-lived branches
    - /^branch-.+/

before_script:
  - psql -c 'create database trellis;' -U postgres
  - mysql -e 'CREATE DATABASE trellis;'

env:
  - JOB=check

jobs:
  allow_failures:
      - env: JOB=sonatype
      - env: JOB=docker
      - env: JOB=aws

  include:
    # JDK 8
    - name: "Java 8"
      stage: test
      jdk: openjdk8
      script: travis_retry ./gradlew check -x pmdMain -x spotbugsMain install jacocoRootReport --continue --scan
      after_success: ./gradlew coveralls sonarqube

    - name: "Java 8 (Quarkus)"
      stage: test
      jdk: openjdk8
      env: QUARKUS_EXTERNAL_PGSQL=true
      script: travis_retry ./gradlew check -x :trellis-db-app:check -x pmdMain -x spotbugsMain install --continue --scan

    # JDK 11
    - name: "Java 11"
      stage: test
      jdk: openjdk11
      dist: xenial
      script: travis_retry ./gradlew check install -x pmdMain -x spotbugsMain

    # deploy JDK 8 builds to Sonatype
    - name: "Publish to Sonatype"
      stage: deploy
      jdk: openjdk8
      env: JOB=sonatype
      if: branch = master AND type = push
      # Only automate the publication of SNAPSHOTS
      script: if [[ $(./gradlew -q getVersion) == *SNAPSHOT* ]]; then ./gradlew publish ; fi

    # deploy to Docker hub
    - name: "Publish to Docker hub"
      stage: deploy
      jdk: openjdk8
      env: JOB=docker
      # Note: allow maintenance branches
      if: branch = master AND type = push
      before_script: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      # Note: for maintenance branches, remove the dockerPushLatest task
      script: if [[ $(./gradlew -q getVersion) == *SNAPSHOT* ]]; then ./gradlew dockerPush dockerPushDevelop; else ./gradlew dockerPush dockerPushLatest; fi

    - name: "Publish JavaDocs"
      stage: deploy
      jdk: openjdk8
      env: JOB=aws
      if: branch = master AND type = push
      script: ./gradlew apidocs
      deploy:
          provider: s3
          access_key_id: $AWS_ACCESS_KEY
          secret_access_key: $AWS_SECRET_KEY
          bucket: $AWS_BUCKET
          skip_cleanup: true
          local_dir: docs/apidocs/$(./gradlew -q getVersion)
          upload-dir: docs/trellis-extensions/$(./gradlew -q getVersion)/apidocs
          default_text_charset: 'utf-8'



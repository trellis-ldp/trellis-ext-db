plugins {
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'com.github.spotbugs' version '3.0.0'
    id 'com.gradle.build-scan' version '3.1'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.owasp.dependencycheck' version '5.2.4'
    id 'org.sonarqube' version '2.8'
    id 'biz.aQute.bnd.builder' version '4.1.0' apply false
    id 'com.palantir.docker' version '0.22.1' apply false
    id 'nebula.ospackage' version '8.0.3' apply false
    id 'io.quarkus' version '1.0.1.Final' apply false
}

ext {

    /* Dependencies */
    activeMqVersion = '5.15.11'
    awsVersion = '1.11.689'
    commonsCompressVersion = '1.19'
    commonsIoVersion = '2.6'
    commonsLangVersion = '3.9'
    commonsRdfVersion = '0.5.0'
    dropwizardVersion = '2.0.0'
    jacksonVersion = '2.10.1'
    jdbiVersion = '3.11.1'
    jjwtVersion = '0.10.7'
    kafkaVersion = '2.3.0'
    liquibaseVersion = '3.8.2'
    mustacheVersion = '0.9.6'
    quarkusVersion = '1.0.1.Final'
    slf4jVersion = '1.7.29'
    smallryeConfigVersion = '1.5.0'
    smallryeHealthVersion = '2.1.0'
    snakeyamlVersion = '1.25'
    thriftVersion = '0.13.0'
    trellisVersion = '0.9.0-SNAPSHOT'

    /* JavaEE */
    activationApiVersion = '1.2.1'
    annotationApiVersion = '1.3.5'
    cdiApiVersion = '2.0.2'
    injectApiVersion = '1.0'
    jmsApiVersion = '2.0.3'
    transactionApiVersion = '1.3.3'

    /* Miroprofile */
    microprofileConfigVersion = '1.3'
    microprofileHealthVersion = '2.1'

    /* Databases */
    cassandraDriverVersion = '4.2.0'
    mysqlVersion = '8.0.18'
    postgresVersion = '42.2.9'

    /* Testing */
    apiguardianVersion = '1.1.0'
    awaitilityVersion = '4.0.1'
    commonsTextVersion = '1.8'
    guavaVersion = '28.1-jre'
    h2Version = '1.4.200'
    jaxbApiVersion = '2.3.2'
    jenaVersion = '3.13.1'
    junitVersion = '5.5.2'
    logbackVersion = '1.2.3'
    mockitoVersion = '3.2.0'
    otjPgVersion = '0.13.3'
    weldVersion = '2.0.1.Final'

    /* Tools */
    checkstyleVersion = '8.26'
    jacocoVersion = '0.8.5'
    pmdVersion = '6.20.0'
    spotbugsVersion = '3.1.12'

    /* OSGi */
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")

    jacocoSkipProjects = [
        'trellis-db-deployment',
        'trellis-ext-bom'
    ]

    omitFromMavenPublishing = [
        'trellis-db-deployment',
        'trellis-quarkus'
    ]
}

allprojects { subproj ->
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://www.trellisldp.org/docs/trellis-extensions/current/apidocs/'
        license = 'Apache 2'
    }

    jacoco.toolVersion = jacocoVersion

    group = 'org.trellisldp.ext'

    repositories {
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation enforcedPlatform("org.junit:junit-bom:$junitVersion")
        testImplementation("org.apiguardian:apiguardian-api:${apiguardianVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeClasspath("org.junit.jupiter:junit-jupiter-engine")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            /* Note: for maintenance branches, set this value to the appropriate branch name. */
            requireBranch = 'master'
            signTag = true
        }
    }

    configurations.all {
        resolutionStrategy {
            force "org.apache.thrift:libthrift:$thriftVersion"
        }
        resolutionStrategy.dependencySubstitution {
            substitute module("org.apache.geronimo.specs:geronimo-annotation_1.2_spec") with module ("jakarta.annotation:jakarta.annotation-api:$annotationApiVersion")
            substitute module("org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec") with module ("jakarta.transaction:jakarta.transaction-api:$transactionApiVersion")
            substitute module("javax.annotation:javax.annotation-api") with module("jakarta.annotation:jakarta.annotation-api:$annotationApiVersion")
            substitute module("javax.enterprise:cdi-api") with module("jakarta.enterprise:jakarta.enterprise.cdi-api:$cdiApiVersion")
            substitute module("javax.inject:javax.inject") with module("jakarta.inject:jakarta.inject-api:$injectApiVersion")
            substitute module("javax.xml.bind:jaxb-api") with module("jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion")
        }
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group.startsWith('com.fasterxml.jackson.')) {
                details.useVersion jacksonVersion
                details.because 'Jackson modules should use a consistent version'
            }
        }
    }
}

subprojects { subproj ->

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    spotbugs {
        ignoreFailures = true
        excludeFilter = rootProject.file('buildtools/src/main/resources/spotbugs/exclusions.xml')
        toolVersion = spotbugsVersion
        sourceSets = [sourceSets.main]
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                pom {
                    packaging = 'jar'
                    name = 'Trellis Linked Data Server: database extension'
                    description = 'A database persistence layer for the Trellis linked data server'
                    url = "https://www.trellisldp.org"
                    inceptionYear = '2017'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    developers {
                        developer {
                            id = 'acoburn'
                            name = 'Aaron Coburn'
                            email = 'acoburn (at) apache (dot) org'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/trellis-ldp/trellis-extensions.git'
                        developerConnection = 'scm:git:git@github.com/trellis-ldp/trellis-extensions.git'
                        url = 'https://github.com/trellis-ldp/trellis-extensions'
                        tag = 'HEAD'
                    }

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0'
                            comments = 'Copyright (c) 2017-2019 Trellis LDP'
                        }
                    }
                }
                pom.withXml {
                    // eliminate test-scoped dependencies
                    asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                }

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }

                artifact(javadocJar) {
                    classifier = 'javadoc'
                }
            }
        }
        repositories {
            maven {
                def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
                def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
                if (version.endsWith("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    tasks.withType(PublishToMavenLocal) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    task install(dependsOn: [assemble, publishToMavenLocal])
    task upload(dependsOn: [assemble, publish])

    processResources {
        outputs.upToDateWhen { false }
        filesMatching(['**/features.xml', '**/banner.txt']) {
            expand project.properties
        }
    }

    signing {
        required {
            !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
                gradle.taskGraph.hasTask it
            }
        }
        sign publishing.publications
    }

    gradle.taskGraph.whenReady( { graph ->
        tasks.withType(AbstractArchiveTask).each { archive ->
            archive.doLast {
                ant.checksum file: archive.archivePath, algorithm: 'sha-256', format: 'MD5SUM', fileext: '.sha256'
            }
        }
    })

    task docs(type: Javadoc) {
        outputs.upToDateWhen { false }
        source sourceSets.main.allJava
        classpath = files(sourceSets.main.compileClasspath)
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links "https://www.trellisldp.org/docs/trellis/${trellisVersion}/apidocs/"
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://www.dropwizard.io/1.3.0/dropwizard-core/apidocs/'
            links 'https://docs.datastax.com/en/drivers/java/4.0/'
            links 'https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/'
            links 'http://jdbi.org/apidocs/'
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    javadoc {
        options.tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    sonarqube {
        // Only record this for jdk8 builds
        skipProject = ! JavaVersion.current().isJava8()
    }

    pmd {
        ignoreFailures = true
        consoleOutput = true
        incrementalAnalysis = true
        toolVersion = pmdVersion
        sourceSets = [sourceSets.main]
        rulePriority = 4
        ruleSets = []
        ruleSetConfig = resources.text.fromFile(rootProject.file('buildtools/src/main/resources/pmd/pmd.xml'))
    }

    test {
        useJUnitPlatform()
    }

    afterReleaseBuild.dependsOn docs
    afterReleaseBuild.dependsOn publish
    afterReleaseBuild.dependsOn assemble

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

configure(rootProject) {

    task apidocs(type: Javadoc, dependsOn: getTasksByName('docs', true)) {
        outputs.upToDateWhen { false }
        destinationDir = new File(projectDir, "docs/apidocs/${project.version}")
        title = "Trellis Linked Data Server Documentation"
        exclude '**/impl/*'
        exclude '**/*Tests.java'
        options {
            tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]
            memberLevel = JavadocMemberLevel.PUBLIC
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links "https://www.trellisldp.org/docs/trellis/${trellisVersion}/apidocs/"
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://www.dropwizard.io/1.3.0/dropwizard-core/apidocs/'
            links 'https://docs.datastax.com/en/drivers/java/4.0/'
            links 'https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/'
            links 'http://jdbi.org/apidocs/'
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        source subprojects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    }

    sonarqube {
        properties {
            property "sonar.projectName", "Trellis Linked Data Server Extensions"
            property "sonar.projectKey", "org.trellisldp:trellis-extensions"
            property "sonar.links.homepage", "https://www.trellisldp.org"
            property "sonar.links.issue", "https://github.com/trellis-ldp/trellis-extensions/issues"
            property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis-extensions.git"
        }
    }

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'm', 'cr'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

    task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
        dependsOn = subprojects.test
        additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
        sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(subprojects.sourceSets.main.output))
        executionData.from(files(subprojects.findAll { ! jacocoSkipProjects.contains(it.name) }.jacocoTestReport.executionData))
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }

    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    tasks.coveralls {
        dependsOn 'jacocoRootReport'
    }

    task getVersion {
        doLast {
            println project.version
        }
    }
}
